# ================= User configured area ================= 
#

# --------------------- ZSH ---------------------
# Clear history menu using Esc
bindkey -M menuselect -s '^[' '^G^_'
# -----------------------------------------------

# --------- Path ----------
# Personal binaries
export PATH=$PATH:$HOME/bin
# CUDA
export PATH=$PATH:/usr/local/cuda/bin
# Python Poetry
export PATH=$PATH:$HOME/.local/bin
# -------------------------

# --------- Environment configurations ----------
# Color man pages: https://www.tecmint.com/view-colored-man-pages-in-linux/
export LESS_TERMCAP_mb=$'\e[1;32m'
export LESS_TERMCAP_md=$'\e[1;32m'
export LESS_TERMCAP_me=$'\e[0m'
export LESS_TERMCAP_se=$'\e[0m'
export LESS_TERMCAP_so=$'\e[01;33m'
export LESS_TERMCAP_ue=$'\e[0m'
export LESS_TERMCAP_us=$'\e[1;4;31m'
# Terminal colors (for tmux)
#    From: https://github.com/zsh-users/zsh-autosuggestions/issues/229#issuecomment-300675586
export TERM=xterm-256color
# Editor configuration
export EDITOR="nvim"    # Use NeoVim
# -----------------------------------------------

# ------ Ada HPC (IIIT Hyderabad) ------ 
# Username on ada
export USER_ADA="avneesh.mishra"
export USER_RRC="avneesh.mishra"
# Quick ssh into ada
alias ada_ssh="ssh_ada -X $USER_ADA@ada"
# Aliases for tunneling SSH connections to Ada (sync with VSCode config file)
export VSCODE_SSH_CONFIG="$HOME/.ssh/config.vscode"
alias link-ada="ssh -L 51000:localhost:22 $USER_ADA@ada"
function link-gnode() {
    if [[ "$2" ]]; then
        port_num=$2
    else
        port_num=60000
    fi
    if [[ "$3" ]]; then
        src_port=$3
    else
        src_port=22
    fi
    gnode_name="gnode$(printf '%03d' $1)"
    ssh_str="ssh -L ${port_num}:localhost:${src_port} -X -J $USER_ADA@ada $USER_ADA@$gnode_name"
    echo -ne "\e[0;36m"
    echo $ssh_str
    echo -ne "\e[0m"
    eval $ssh_str
    ecode=$?
    echo "SSH Connection ended - exit code $ecode"
}
# --------------------------------------

# ------------------------- Anaconda -------------------------
# Disable base on startup: conda config --set auto_activate_base false
function conda-init() {
    # >>> conda initialize >>>
    # !! Contents within this block are managed by 'conda init' !!
    __conda_setup="$('/home/avneesh/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
    if [ $? -eq 0 ]; then
        eval "$__conda_setup"
    else
        if [ -f "/home/avneesh/anaconda3/etc/profile.d/conda.sh" ]; then
            . "/home/avneesh/anaconda3/etc/profile.d/conda.sh"
        else
            export PATH="/home/avneesh/anaconda3/bin:$PATH"
        fi
    fi
    unset __conda_setup
    # <<< conda initialize <<<
}
# ------------------------------------------------------------

# -------- RubyGems installation ----------
# Paths
#   From: https://jekyllrb.com/docs/installation/ubuntu/
export GEM_HOME="$HOME/gems"
export PATH="$PATH:$HOME/gems/bin"
# NPM
#  Set home
#  From: https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally
export NPM_CONFIG_PREFIX=~/.npm-global
export PATH=$PATH:${NPM_CONFIG_PREFIX}/bin
# -----------------------------------------

# -------- AWS CLI ----------
# Autocomplete
#  From: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-completion.html#cli-command-completion-linux
autoload bashcompinit && bashcompinit
autoload -Uz compinit && compinit
complete -C '/usr/local/bin/aws_completer' aws
# ---------------------------

# --------------------- ROS --------------------- 
# Source installation
function ros-init() {
    # Main ROS installation
    source /opt/ros/humble/setup.zsh
}
# -----------------------------------------------

# ---------------- PyEnv ----------------
# Add installation to path
export PYENV_ROOT="$HOME/.pyenv"
export PATH=$PATH:$PYENV_ROOT/bin
function pyenv-init() {
    eval "$(pyenv init -)"
}
# ---------------------------------------